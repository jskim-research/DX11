Texture2D shaderTexture : register(t0);
Texture2DArray gltfTextures : register(t1);
SamplerState SampleType : register(s0);

cbuffer LightBuffer
{
	float4 diffuseColor;
	float3 lightDirection;
	// 16 의 배수 제약 만족시키기 위함
	float padding;
};

struct PixelInputType
{
	float4 position : SV_POSITION;
	float3 normal : NORMAL;
	float4 color : COLOR;
	float2 tex : TEXCOORD0;
	nointerpolation uint imageIndex : TEXCOORD1;
};

float4 LightPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;

	textureColor = gltfTextures.Sample(SampleType, float3(input.tex, input.imageIndex));
	// 내적으로 사잇값 구하려면 invert 필요
	lightDir = -lightDirection;
	lightIntensity = saturate(dot(lightDir, input.normal));

	color = saturate(diffuseColor * lightIntensity);
	color = color * textureColor;

	return color;
}