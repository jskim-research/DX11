Texture2D shaderTexture : register(t0);
Texture2D gltfTexture0 : register(t1);
Texture2D gltfTexture1 : register(t2);
Texture2D gltfTexture2 : register(t3);
Texture2D gltfTexture3 : register(t4);
SamplerState SampleType : register(s0);

cbuffer LightBuffer
{
	float4 diffuseColor;
	float3 lightDirection;
	// 16 의 배수 제약 만족시키기 위함
	float padding;
};

struct PixelInputType
{
	float4 position : SV_POSITION;
	float3 normal : NORMAL;
	float4 color : COLOR;
	float2 tex : TEXCOORD0;
	nointerpolation uint imageIndex : TEXCOORD1;
};

float4 CartoonPixelShader(PixelInputType input) : SV_TARGET
{
	float4 textureColor;
	float3 lightDir;
	float lightIntensity;
	float4 color;

	if (input.imageIndex == 0)
	{
		textureColor = gltfTexture0.Sample(SampleType, input.tex.xy);
	}
	else if (input.imageIndex == 1)
	{
		textureColor = gltfTexture1.Sample(SampleType, input.tex.xy);
	}
	else if (input.imageIndex == 2)
	{
		textureColor = gltfTexture2.Sample(SampleType, input.tex.xy);
	}
	else if (input.imageIndex == 3)
	{
		textureColor = gltfTexture3.Sample(SampleType, input.tex.xy);
	}
	else	
	{
		textureColor = 0;
	}

	// textureColor = shaderTexture.Sample(SampleType, input.tex);
	// 내적으로 사잇값 구하려면 invert 필요
	lightDir = -lightDirection;
	lightIntensity = saturate(dot(lightDir, input.normal));

	// color = saturate(diffuseColor * lightIntensity);
	// color = color * textureColor;

	return textureColor;
}